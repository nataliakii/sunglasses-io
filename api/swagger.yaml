---
swagger: "2.0"
info:
  description: "An API for sunglasses app"
  version: "1.0.0"
  title: "Sunglasses API"
host: "api.sunglasses-io.com"
basePath: "/api"
schemes:
- "https"
produces:
- "application/json"
paths:
  /brands:
    get:
      tags:
      - "Brands"
      summary: "Available brands for sunglasses"
      description: "The Brands endpoint allows you to search based on a brand\n"
      operationId: "getBrands"
      parameters:
      - name: "query"
        in: "query"
        description: "Search query string"
        required: true
        type: "string"
      responses:
        "200":
          description: "An array of appropriate brands"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Brands"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Brands"
  /brands/{id}/products:
    get:
      tags:
      - "Brands"
      description: "This endpoint allows you to get all the sunglasess of this brand\
        \ based on its id\n"
      operationId: "getBrandProduct"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the brand"
        required: true
        type: "string"
      responses:
        "200":
          description: "An array of approp branded sunglasses"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Brands"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Brands"
  /products:
    get:
      tags:
      - "Products"
      summary: "Sunglasses of a particular brand"
      description: "This endpoint allows you to get a product based on the search\
        \ input\n"
      operationId: "getProducts"
      parameters:
      - name: "query"
        in: "query"
        description: "Search query string"
        required: true
        type: "string"
      responses:
        "200":
          description: "An array of products"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Products"
  /login:
    post:
      tags:
      - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: false
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /me/cart:
    get:
      tags:
      - "Cart"
      summary: "Cart of a user"
      description: "Cart of an authorised user"
      operationId: "getCart"
      parameters:
      - in: "body"
        name: "cart"
        description: "The cart of added sunglasses of a user"
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        "200":
          description: "Acceptance is successful"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cart"
    post:
      tags:
      - "Cart"
      summary: "Add to cart"
      description: "Add sunglasses to a cart\n"
      operationId: "addToCart"
      parameters:
      - in: "body"
        name: "cart"
        description: "The cart of products of a user"
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        "200":
          description: "Acceptance is successful"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cart"
  /me/cart/{productId}:
    put:
      tags:
      - "Cart"
      summary: "Change the quantity of products in a cart"
      description: "Change the quantity of products \n"
      operationId: "changeQuantity"
      parameters:
      - name: "productId"
        in: "path"
        description: "The cart of products of a user"
        required: true
        type: "string"
      responses:
        "200":
          description: "Acceptance is successful"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cart"
    delete:
      tags:
      - "Cart"
      summary: "Delete an item from cart"
      description: "This endpoint is for deleting a product based on its id"
      operationId: "deleteProductId"
      parameters:
      - name: "productId"
        in: "path"
        description: "The cart of added sunglasses of a user"
        required: true
        type: "string"
      responses:
        "200":
          description: "Acceptance is successful"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cart"
definitions:
  Brands:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier for a brand."
      name:
        type: "string"
        description: "Name of the brand"
    example:
      name: "name"
      id: "id"
  Product:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The unique identifier given to the product"
      name:
        type: "string"
        description: "The name of the product"
      description:
        type: "string"
        description: "description of glasses"
      price:
        type: "number"
        description: "The price of the sunglasses"
      imageURLs:
        type: "string"
        description: "The URLs for the images representing the product"
    example:
      price: 0.80082819046101150206595775671303272247314453125
      imageURLs: "imageURLs"
      name: "name"
      description: "description"
      id: "id"
  User:
    type: "object"
    properties:
      gender:
        type: "string"
        description: "gender of the user"
      cart:
        type: "array"
        description: "cart of the user"
        items:
          $ref: "#/definitions/Product"
      name-title:
        type: "string"
        description: "title for user."
      first_name:
        type: "string"
        description: "First name of the user."
      last_name:
        type: "string"
        description: "Last name of the user."
      location:
        type: "object"
        description: "Location of the user."
        properties: {}
      email:
        type: "string"
        description: "Email address of the user"
      login:
        type: "object"
        description: "login info of the user"
        properties: {}
      dob:
        type: "string"
        description: "date of birth of the user"
      registered:
        type: "string"
        description: "date of registartion of the user"
      phone:
        type: "string"
        description: "phone number of the user"
      cell:
        type: "string"
        description: "phone number of the user"
      picture:
        type: "string"
        description: "URL of pics of the user"
      nat:
        type: "string"
        description: "nationality of the user"
  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 10
      name:
        type: "string"
        description: "The name of the product"
      quantity:
        type: "integer"
        format: "int32"
        description: "Number of products."
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
